window.SIDEBAR_ITEMS = {"constant":[["NOT_DEALT","Constant representing that the card is not yet dealt."]],"enum":[["Action","Available actions in a postflop game."],["BetSize","Bet size specification."]],"fn":[["card_from_chars","Attempts to read the next card from a char iterator."],["card_from_str","Attempts to convert a string into a card."],["card_to_string","Attempts to convert a card into a string."],["compute_average","Computes the average with given weights."],["compute_exploitability","Computes the exploitability of the current strategy."],["finalize","Finalizes the solving process."],["flop_from_str","Attempts to convert an optionally space-separated string into a sorted flop array."],["solve","Performs Discounted CFR algorithm until the given number of iterations or exploitability is satisfied."],["solve_step","Proceeds Discounted CFR algorithm for one iteration."]],"struct":[["BetSizeCandidates","Bet size candidates for the first bet and raise."],["DonkSizeCandidates","Bet size candidates for the donk bet, i.e., the bet action by OOP in a situation where IP was the last aggressor on the previous street."],["GameConfig","A struct for postflop game configuration."],["MutexGuardLike","Smart pointer like wrapper that is returned when [`MutexLike`] is “locked”."],["MutexLike","Mutex-like wrapper, but it actually does not perform any locking."],["PostFlopGame","A struct representing a postflop game."],["PostFlopNode","A struct representing a node in postflop game tree."],["Range","A struct representing a player’s range."]],"trait":[["Game","The trait representing a game."],["GameNode","The trait representing a node in game tree."]]};