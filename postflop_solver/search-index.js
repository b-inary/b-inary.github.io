var searchIndex = JSON.parse('{\
"postflop_solver":{"doc":"An open-source postflop solver library.","t":[4,13,13,4,3,13,13,13,3,13,8,3,8,13,3,3,17,13,3,3,13,13,3,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,5,12,12,5,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,11,11,11,11,5,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Action","AllIn","Bet","BetSize","BetSizeCandidates","Call","Chance","Check","DonkSizeCandidates","Fold","Game","GameConfig","GameNode","LastBetRelative","MutexGuardLike","MutexLike","NOT_DEALT","None","PostFlopGame","PostFlopNode","PotRelative","Raise","Range","add_all_in_threshold","adjust_last_two_bet_sizes","allocate_memory","apply_history","available_actions","back_to_root","bet","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache_normalized_weights","card_from_chars","card_from_str","card_to_string","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","compute_average","compute_exploitability","config","current_player","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","donk","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","effective_stack","eq","eq","eq","eq","eq","equity","expected_values","expected_values_detail","finalize","flop","flop_bet_sizes","flop_from_str","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_all_in_threshold","from","from","from","from","from","from","from","from","from","from","from_hands_weights","from_raw_data","from_sanitized_str","from_str","get_hands_weights","get_weight_by_cards","get_weight_offsuit","get_weight_pair","get_weight_suited","history","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","is_chance_node","is_empty","is_terminal_action","lock","memory_usage","new","new","new","normalized_weights","ones","partial_cmp","partial_cmp","play","possible_cards","private_hand_cards","raise","range","raw_data","river","river_bet_sizes","river_donk_sizes","set_weight_by_cards","set_weight_offsuit","set_weight_pair","set_weight_suited","solve","solve_step","starting_pot","strategy","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","turn","turn_bet_sizes","turn_donk_sizes","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_config","weights","with_config"],"q":["postflop_solverd":["Available actions in a postflop game.","All-in action with a specified amount.","Bet action with a specified amount.","Bet size specification.","Bet size candidates for the first bet and raise.","Call action.","Chance action with a card ID (in range [<code>0</code>, <code>52</code>)).","Check action.","Bet size candidates for the donk bet, i.e., the bet action …","Fold action.","The trait representing a game.","A struct for postflop game configuration.","The trait representing a node in game tree.","Bet size relative to the last bet size. This is only valid …","Smart pointer like wrapper that is returned when <code>MutexLike</code> …","Mutex-like wrapper, but it actually does not perform any …","Constant representing that the card is not yet dealt.","Only used for the previous action of the root node.","A struct representing a postflop game.","A struct representing a node in postflop game tree.","Bet size relative to the current pot size.","Raise action with a specified amount.","A struct representing a player’s range.","Add all-in action when SPR is below this value (set <code>0.0</code> to …","Enable bet size adjustment of last two bets.","Allocates the memory.","Applies the given history from the root node.","Returns the available actions for the current node.","Moves the current node back to the root node.","Bet size candidates for first bet.","","","","","","","","","","","","","","","","","","","","","Computes the normalized weights and caches them.","Attempts to read the next card from a char iterator.","Attempts to convert a string into a card.","Attempts to convert a card into a string.","Clears the range.","","","","","","","","","","","","","","Computes the average with given weights.","Computes the exploitability of the current strategy.","Obtains the game configuration.","Returns the current player (0 = OOP, 1 = IP).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Initial effective stack size: must be greater than <code>0</code>.","","","","","","Returns the equity of each private hand of the given …","Returns the expected values of each private hand of the …","Returns the expected values of each action of each private …","Finalizes the solving process.","Flop cards: each card must be unique and in range [<code>0</code>, <code>52</code>).","Bet size candidates of each player for the flop.","Attempts to convert an optionally space-separated string …","","","","","","","","","Force all-in action when the ratio of opponent’s next …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to create a range from a list of hands with their …","Attempts to create a range from raw data.","Attempts to create a range from a sanitized range string.","","Returns a list of all hands in this range and their …","Obtains the weight of a specified hand.","Obtains the average weight of specified offsuit hands.","Obtains the average weight of specified pair hands.","Obtains the average weight of specified suited hands.","Returns the history of the current node.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether the current node is a chance node.","Returns whether the range is empty.","Returns whether the available actions are terminal.","Acquires a mutex-like object <strong>without</strong> performing any …","Returns the estimated memory usage in bytes (uncompressed, …","Constructs a new empty <code>PostFlopGame</code> (needs <code>update_config()</code> …","Creates a new <code>MutexLike</code> with the given value.","Creates an empty range.","Returns the normalized weights of each private hand of the …","Creates a full range.","","","Plays the given action. Playing a terminal action is not …","If the current node is a chance node, returns a list of …","Returns the card list of private hands of the given player.","Bet size candidates for raise.","Initial range of each player.","Obtains the raw data of the range.","River card: must be in range [<code>0</code>, <code>52</code>) or <code>NOT_DEALT</code>.","Bet size candidates of each player for the river.","Donk size candidates for the river (set <code>None</code> to disable).","Sets the weight of a specified hand.","Sets the weights of specified offsuit hands.","Sets the weights of specified pair hands.","Sets the weights of specified suited hands.","Performs Discounted CFR algorithm until the given number …","Proceeds Discounted CFR algorithm for one iteration.","Initial pot size: must be greater than <code>0</code>.","Returns the strategy of the current player.","","","","","","","","","","","Attempts to convert comma-separated strings into bet sizes.","","Attempts to convert comma-separated strings into bet sizes.","","","","","","","","","","","","","","","","","Turn card: must be in range [<code>0</code>, <code>52</code>) or <code>NOT_DEALT</code>.","Bet size candidates of each player for the turn.","Donk size candidates for the turn (set <code>None</code> to disable).","","","","","","","","","","","Updates the game configuration. The solved result will be …","Returns the weights of each private hand of the given …","Constructs a new <code>PostFlopGame</code> instance with the given …"],"i":[0,12,12,0,0,12,12,12,0,12,0,0,0,10,0,0,0,12,0,0,10,12,0,11,11,1,1,1,1,8,1,16,8,9,10,11,12,19,20,7,1,16,8,9,10,11,12,19,20,7,1,0,0,0,7,8,9,10,11,12,7,8,9,10,11,12,7,12,0,0,1,1,1,16,8,9,11,19,7,1,16,8,9,10,11,12,19,20,20,7,1,16,8,9,10,11,12,19,20,20,7,9,1,16,8,9,10,11,12,19,20,7,11,8,9,10,12,7,1,1,1,0,11,11,0,8,9,10,11,12,19,20,7,11,1,16,8,9,10,11,12,19,20,7,7,7,7,7,7,7,7,7,7,1,1,16,8,9,10,11,12,19,20,7,1,16,8,9,10,11,12,19,20,7,1,7,1,19,1,1,19,7,1,7,10,12,1,1,1,8,11,7,11,11,11,7,7,7,7,0,0,11,1,8,9,10,11,12,7,7,1,16,8,8,9,9,10,11,12,19,20,7,1,16,8,9,10,11,12,19,20,7,11,11,11,1,16,8,9,10,11,12,19,20,7,1,1,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],[1],[1],[1],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[[],[[5,[3,4]]]],[6,[[5,[3,4]]]],[3,[[5,[4,4]]]],[7],[8,8],[9,9],[10,10],[11,11],[12,12],[7,7],[[]],[[]],[[]],[[]],[[]],[[]],[[12,12],13],[[],14],[[],14],[1,11],[1,15],[[],1],[[],16],[[],8],[[],9],[[],11],[[],[[19,[[0,[17,18]]]]]],[[],7],[15],[15],[15],[15],[15],[15],[15],[15],[[[20,[17]]]],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[[20,[17]]]],[15],0,[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],0,[[8,8],2],[[9,9],2],[[10,10],2],[[12,12],2],[[7,7],2],[[1,15],[[21,[14]]]],[1,[[21,[14]]]],[1,[[21,[14]]]],[[]],0,0,[6,[[5,[4]]]],[[8,22],23],[[9,22],23],[[10,22],23],[[11,22],23],[[12,22],23],[[[19,[[0,[24,17]]]],22],23],[[[20,[[0,[24,17]]]],22],23],[[7,22],23],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[5,[7,4]]]],[[],[[5,[7,4]]]],[6,[[5,[7,4]]]],[6,[[5,[7]]]],[[7,25]],[[7,3,3],14],[[7,3,3],14],[[7,3],14],[[7,3,3],14],[1],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[7,2],[1,[[21,[2]]]],[[[19,[17]]],[[20,[17]]]],[1],[[],1],[[],19],[[],7],[[1,15]],[[],7],[[10,10],[[26,[13]]]],[[12,12],[[26,[13]]]],[[1,15]],[1,25],[[1,15]],0,0,[7],0,0,0,[[7,3,3,14]],[[7,3,3,14]],[[7,3,14]],[[7,3,3,14]],[[27,14,2],14],[27],0,[1,[[21,[14]]]],[[]],[[]],[[]],[[]],[[]],[[]],[7,4],[[],5],[[],5],[[],5],[[],[[5,[8]]]],[[],5],[6,[[5,[9]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,0,[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[1,11],[[5,[4]]]],[[1,15]],[11,[[5,[1,4]]]]],"p":[[3,"PostFlopGame"],[15,"bool"],[15,"u8"],[3,"String"],[4,"Result"],[15,"str"],[3,"Range"],[3,"BetSizeCandidates"],[3,"DonkSizeCandidates"],[4,"BetSize"],[3,"GameConfig"],[4,"Action"],[4,"Ordering"],[15,"f32"],[15,"usize"],[3,"PostFlopNode"],[8,"Sized"],[8,"Default"],[3,"MutexLike"],[3,"MutexGuardLike"],[3,"Vec"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[15,"u64"],[4,"Option"],[15,"u32"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
